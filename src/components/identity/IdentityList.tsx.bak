import { useMemo, useState } from "react";
import { Button } from "../ui/button";
import NewIdentity from "./NewIdentity";
import { useIdentities } from "@/web5/use-identities";
import { useAgent } from "@/web5/use-agent";
import { Checkbox } from "../ui/checkbox";
import { useTheme } from '../../contexts/ThemeContext';

const IdentityList: React.FC = () => {
  const { agent } = useAgent();
  const { identities, reloadIdentities } = useIdentities();
  const [newIdentity, setNewIdentity] = useState<boolean>(false);
  const [checkedSet, setCheckedSet] = useState<Set<string>>(new Set());
  const { theme } = useTheme();

  const done = () => {
    setNewIdentity(false);
  }

  const deleteIdentities = async () => {
    if (!agent) {
      throw new Error('No agent is set');
    };

    for (const did of checkedSet) {
      try {
        await agent.did.delete({ didUri: did, deleteKey: true });
      } catch(error) {
        console.info('unable to delete did', error)
      }

      try {
        await agent.identity.delete({ didUri: did })
      } catch(error) {
        console.info('unable to delete identity', error)
      }

      checkedSet.delete(did);
    }

    reloadIdentities()
  }

  const identitiesList = useMemo(() => {
    const toggleChecked = (did: string) => {
      setCheckedSet((prevSet) => {
        const newSet = new Set(prevSet);
        if (newSet.has(did)) {
          newSet.delete(did);
        } else {
          newSet.add(did);
        }
        return newSet;
      });
    }

    return identities.map(identity => (
      <div key={identity.did.uri} className="identity-item">
        <div className="flex flex-col flex-grow overflow-hidden mr-2">
          <span className="font-semibold text-sm">{identity.metadata.name}</span>
          <span className="text-xs text-gray-500 truncate">{identity.did.uri}</span>
        </div>
        <Checkbox
          checked={checkedSet.has(identity.did.uri)}
          onCheckedChange={() => toggleChecked(identity.did.uri)}
          className="border-2 border-gray-300 rounded-sm"
        />
      </div>
    ));
  }, [checkedSet, identities]);
  
  return (
    <div className="space-y-6">
      <div className="bg-surface-light dark:bg-surface-dark rounded-lg p-6 mb-6">
        <h2 className="text-3xl font-bold text-text-light-primary dark:text-text-dark-primary mb-2">$21,564.76</h2>
        <p className="text-text-light-secondary dark:text-text-dark-secondary">USD</p>
      </div>
      <div className="bg-surface-light dark:bg-surface-dark rounded-lg p-6">
        {!newIdentity ? (
          <>
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Your Identities</h2>
            <div className="identity-list">{identitiesList}</div>
            <div className="flex space-x-3 mt-6">
              <Button onClick={() => setNewIdentity(true)} className="flex-1">New Identity</Button>
              {checkedSet.size > 0 && (
                <Button variant="destructive" onClick={deleteIdentities} className="flex-1">Delete Selected</Button>
              )}
            </div>
          </>
        ) : (
          <>
            <NewIdentity done={done} />
            <Button variant="outline" onClick={() => setNewIdentity(false)} className="mt-4 w-full">Cancel</Button>
          </>
        )}
      </div>
    </div>
  );
}

export default IdentityList;